- shell: if [ -e /opt/kibana-{{ kibana_version }}-{{ kibana_platform }} ]; then echo yes; else echo no; fi;
  register: version_exists
  check_mode: no
  changed_when: False

- name: Download kibana zip
  get_url:
    url: "{{ kibana_download_url }}"
    dest: /tmp
  when: version_exists.stdout == 'no'

- name: Unarchive kibana zip
  unarchive:
    src: /tmp/{{ kibana_package }}.{{ kibana_package_ext }}
    dest: /opt
    copy: no
  when: version_exists.stdout == 'no'

- name: Remove old kibana folder link
  file: path=/opt/kibana state=absent
  when: version_exists.stdout == 'no'

- name: Link new kibana folder
  file:
    dest: /opt/kibana
    src: /opt/{{ kibana_package }}
    state: link
    force: yes
  when: version_exists.stdout == 'no'
  notify: restart kibana

- name: Download kibana start script
  get_url: url=https://gist.githubusercontent.com/thisismitch/8b15ac909aed214ad04a/raw/bce61d85643c2dcdfbc2728c55a41dab444dca20/kibana4 dest=/etc/init.d

- name: Setup start script attrs
  file: path=/etc/init.d/kibana4 owner=root group=root mode=0755

- name: Configuring Kibana
  template: src=kibana.yml.j2 dest=/opt/kibana/config/kibana.yml owner=root group=root mode=0644
  notify: restart kibana

- name: Starting kibana
  service: name=kibana4 state=started enabled=yes
  ignore_errors: "{{ ansible_check_mode }}"

- shell: if [ -e /tmp/beats-dashboards-{{ kibana_beats_dashboard_version }} ]; then echo yes; else echo no; fi;
  register: beats_dashboard_version_exists
  check_mode: no
  changed_when: False
  tags: ['kibana_config']

- name: Download Beats Dashboard
  get_url:
    url: https://download.elastic.co/beats/dashboards/beats-dashboards-{{ kibana_beats_dashboard_version }}.zip
    dest: /tmp
  when: beats_dashboard_version_exists.stdout == 'no'
  tags: ['kibana_config']

- name: Unarchive Beats Dashboard zip
  unarchive:
    src: /tmp/beats-dashboards-{{ kibana_beats_dashboard_version }}.zip
    dest: /tmp
    copy: no
  when: beats_dashboard_version_exists.stdout == 'no'
  tags: ['kibana_config']

- name: Install Beats Dashboard
  shell: ./load.sh -url {{ kibana_elasticsearch_url }}
  args:
    chdir: /tmp/beats-dashboards-{{ kibana_beats_dashboard_version }}
  when: beats_dashboard_version_exists.stdout == 'no'
  tags: ['kibana_config']

- name: Import visualizations
  become: no
  local_action: shell curl -XPUT {{ kibana_elasticsearch_url }}/.kibana/visualization/{{ (item | basename | splitext)[0] }} -T {{ item }}
  with_fileglob: '{{ kibana_visaulizations_folder }}'
  tags: ['kibana_config']

- name: Import dashboards
  become: no
  local_action: shell curl -XPUT {{ kibana_elasticsearch_url }}/.kibana/dashboard/{{ (item | basename | splitext)[0] }} -T {{ item }}
  with_fileglob: kibana_dashboards_folder
  tags: ['kibana_config']

- name: Import searches
  become: no
  local_action: shell curl -XPUT {{ kibana_elasticsearch_url }}/.kibana/search/{{ (item | basename | splitext)[0] }} -T {{ item }}
  with_fileglob: kibana_searches_folder
  tags: ['kibana_config']

- name: Import templates
  become: no
  local_action: shell curl -XPUT {{ kibana_elasticsearch_url }}/_template/{{ (item | basename | splitext)[0] }} -T {{ item }}
  with_fileglob: kibana_elasticsearch_templates
  tags: ['kibana_config']

- name: Check nginx config
  become: yes
  command: service nginx configtest
  register: result
  notify: restart nginx
  changed_when: False
  tags: ['kibana_config']

- name: Flush handlers
  meta: flush_handlers
